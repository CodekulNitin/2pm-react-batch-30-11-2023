{"ast":null,"code":"import { get as r, set as e } from \"react-hook-form\";\nvar t = function (e, t, i) {\n    if (e && \"reportValidity\" in e) {\n      var n = r(i, t);\n      e.setCustomValidity(n && n.message || \"\"), e.reportValidity();\n    }\n  },\n  i = function (r, e) {\n    var i = function (i) {\n      var n = e.fields[i];\n      n && n.ref && \"reportValidity\" in n.ref ? t(n.ref, i, r) : n.refs && n.refs.forEach(function (e) {\n        return t(e, i, r);\n      });\n    };\n    for (var n in e.fields) i(n);\n  },\n  n = function (t, n) {\n    n.shouldUseNativeValidation && i(t, n);\n    var f = {};\n    for (var a in t) {\n      var s = r(n.fields, a),\n        u = Object.assign(t[a] || {}, {\n          ref: s && s.ref\n        });\n      if (o(n.names || Object.keys(t), a)) {\n        var c = Object.assign({}, r(f, a));\n        e(c, \"root\", u), e(f, a, c);\n      } else e(f, a, u);\n    }\n    return f;\n  },\n  o = function (r, e) {\n    return r.some(function (r) {\n      return r.startsWith(e + \".\");\n    });\n  };\nexport { n as toNestErrors, i as validateFieldsNatively };","map":{"version":3,"names":["t","setCustomValidity","e","i","n","r","message","reportValidity","validateFieldsNatively","fields","ref","refs","forEach","toNestErrors","shouldUseNativeValidation","f","a","s","u","Object","assign","o","names","keys","c","isNameInFieldArray","some","startsWith"],"sources":["/home/appystack_nn/codekul-demo-pro/2pm-react-batch-27-11-2023/my-app/node_modules/@hookform/resolvers/src/validateFieldsNatively.ts","/home/appystack_nn/codekul-demo-pro/2pm-react-batch-27-11-2023/my-app/node_modules/@hookform/resolvers/src/toNestErrors.ts"],"sourcesContent":["import {\n  get,\n  FieldError,\n  ResolverOptions,\n  Ref,\n  FieldErrors,\n  FieldValues,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n  FieldValues,\n  InternalFieldName,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => names.some((n) => n.startsWith(name + '.'));\n"],"mappings":";AASA,IAAMA,CAAA,GAAoB,SAAAC,CACxBC,CAAA,EACAF,CAAA,EACAG,CAAA;IAEA,IAAID,CAAA,IAAO,oBAAoBA,CAAA,EAAK;MAClC,IAAME,CAAA,GAAQC,CAAA,CAAIF,CAAA,EAAQH,CAAA;MAC1BE,CAAA,CAAID,iBAAA,CAAmBG,CAAA,IAASA,CAAA,CAAME,OAAA,IAAY,KAElDJ,CAAA,CAAIK,cAAA,EACL;IAAA;EACH;EAGaJ,CAAA,GAAyB,SAAAK,CACpCH,CAAA,EACAH,CAAA;IACQ,IAAAC,CAAA,YAAAA,EAAA;MAEN,IAAMC,CAAA,GAAQF,CAAA,CAAQO,MAAA,CAAON,CAAA;MACzBC,CAAA,IAASA,CAAA,CAAMM,GAAA,IAAO,oBAAoBN,CAAA,CAAMM,GAAA,GAClDV,CAAA,CAAkBI,CAAA,CAAMM,GAAA,EAAKP,CAAA,EAAWE,CAAA,IAC/BD,CAAA,CAAMO,IAAA,IACfP,CAAA,CAAMO,IAAA,CAAKC,OAAA,CAAQ,UAACV,CAAA;QAAqB,OACvCF,CAAA,CAAkBE,CAAA,EAAKC,CAAA,EAAWE,CAAA,CAAO;MAAA,EAG9C;IAAA;IATD,KAAK,IAAMD,CAAA,IAAaF,CAAA,CAAQO,MAAA,EAAMN,CAAA,CAAAC,CAAA,CAUxC;EAAA;EC1BaA,CAAA,GAAe,SAAAS,CAC1Bb,CAAA,EACAI,CAAA;IAEAA,CAAA,CAAQU,yBAAA,IAA6BX,CAAA,CAAuBH,CAAA,EAAQI,CAAA;IAEpE,IAAMW,CAAA,GAAc;IACpB,KAAK,IAAMC,CAAA,IAAQhB,CAAA,EAAQ;MACzB,IAAMiB,CAAA,GAAQZ,CAAA,CAAID,CAAA,CAAQK,MAAA,EAAQO,CAAA;QAC5BE,CAAA,GAAQC,MAAA,CAAOC,MAAA,CAAOpB,CAAA,CAAOgB,CAAA,KAAS,CAAE,GAAE;UAC9CN,GAAA,EAAKO,CAAA,IAASA,CAAA,CAAMP;QAAA;MAGtB,IAAIW,CAAA,CAAmBjB,CAAA,CAAQkB,KAAA,IAASH,MAAA,CAAOI,IAAA,CAAKvB,CAAA,GAASgB,CAAA,GAAO;QAClE,IAAMQ,CAAA,GAAmBL,MAAA,CAAOC,MAAA,CAAO,IAAIf,CAAA,CAAIU,CAAA,EAAaC,CAAA;QAE5Dd,CAAA,CAAIsB,CAAA,EAAkB,QAAQN,CAAA,GAC9BhB,CAAA,CAAIa,CAAA,EAAaC,CAAA,EAAMQ,CAAA,CACxB;MAAA,OACCtB,CAAA,CAAIa,CAAA,EAAaC,CAAA,EAAME,CAAA,CAE1B;IAAA;IAED,OAAOH,CACT;EAAA;EAEMM,CAAA,GAAqB,SAAAI,CACzBpB,CAAA,EACAH,CAAA;IAAuB,OACpBG,CAAA,CAAMqB,IAAA,CAAK,UAACrB,CAAA;MAAM,OAAAA,CAAA,CAAEsB,UAAA,CAAWzB,CAAA,GAAO,IAAI;IAAA,EAAC;EAAA;AAAA,SAAAE,CAAA,IAAAS,YAAA,EAAAV,CAAA,IAAAK,sBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}